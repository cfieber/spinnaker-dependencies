buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
        classpath 'com.netflix.nebula:nebula-release-plugin:4.1.0'
    }
}

apply plugin: 'nebula.nebula-release'
apply plugin: 'com.jfrog.bintray'

group = 'com.netflix.spinnaker'
description = 'Common dependencies for Spinnaker'

release {
  defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}

nebulaRelease {
  releaseBranchPatterns = [/pom_publish/]
}

def prop = { String name ->
  project.hasProperty(name) ? project.property(name) : ''
}

bintray {
  user = prop('bintrayUser')
  key = prop('bintrayKey') 
  filesSpec {
    from 'build/pom'
    into "${project.group.replace('.', '/')}/${project.name}/${project.version}"
  }
  publish = true
  dryRun = false
  pkg {
    userOrg = 'spinnaker'
    repo = 'maven'
    name = project.name
    desc = prop('description')
    licenses = ['Apache-2.0']
    websiteUrl = 'https://github.com/spinnaker/spinnaker-dependencies'
    vcsUrl = 'https://github.com/spinnaker/spinnaker-dependencies.git'
    issueTrackerUrl = 'https://github.com/spinnaker/spinnaker/issues'
    attributes = [:]
    version {
      name = project.version
      vcsTag = "v${project.version}"
      attributes = [:]
    }
  }
}

project.gradle.taskGraph.whenReady { graph ->
  bintrayUpload.onlyIf {
    graph.hasTask(':final') || graph.hasTask(':candidate')
  }
}

task cleanPom(type: Delete) {
  delete 'build/pom'
}


task updatePomVersion(type: Copy) {
  from('src') {
    include 'spinnaker-dependencies.pom.xml'
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version.toString()])
  }
  into('build/pom')
  rename { "${project.name}-${project.version}.pom" }
}

task publishToMavenLocal(type: Copy) {
  dependsOn updatePomVersion
  from('build/pom') {
    include '*.pom'
  }
  into("${System.getProperty('user.home')}/.m2/repository/${project.group.replace('.', '/')}/${project.name}/${project.version}/")
}

tasks.maybeCreate('clean').dependsOn(cleanPom)
tasks.maybeCreate('build').dependsOn(updatePomVersion)
tasks.bintrayUpload.dependsOn(build)
tasks.release.dependsOn(bintrayUpload)
